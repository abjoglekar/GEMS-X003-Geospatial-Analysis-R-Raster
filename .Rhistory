knitr::opts_chunk$set(echo = TRUE)
# Install and load packages needed for this workshop
packages_to_load <- c("terra", "sf", "tmap", "data.table")
for ( package in packages_to_load ) {
# Check if package is already installed, if not, install and load the package
if (!require(package, character.only=T, quietly=T, warn.conflicts=F)) {
install.packages(package)
suppressPackageStartupMessages(library(package, character.only=T, quietly=T, warn.conflicts=F))
}
}
ras <- rast(nrow = 6, ncol = 6, xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5)
ras
# Assign known values to raster cells
ras_a <- ras
values(ras_a) <- 1:ncell(ras_a)
# Assign random values to raster cells
ras_b <- ras
set.seed(1234)
values(ras_b) <- runif(ncell(ras_b))*10
# plot two rasters
par(mfrow=c(1,2))
plot(ras_a, main="Raster with values 1:36")
plot(ras_b, main="Raster with random values")
soil_order = c("clay", "silt", "sand")
set.seed(1234)
soil_char = sample(soil_order, 36, replace = TRUE)
soil_fact = factor(soil_char, levels = soil_order)
soil = rast(nrow = 6, ncol = 6, res = 0.5,
xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5,
vals = soil_fact)
soil
plot(soil)
nrow(ras_a) # number of rows
ncol(ras_a) # number of columns
ncell(ras_a) # number of cells
ext(ras_a) # raster extent
res(ras_a) # resolution
crs(ras_a) # coordiante reference system
hist(ras_b)  # histogram of raster cell values
r_stack = c(ras_a, ras_b, soil)
names(r_stack) = c("area", "prod" , "soil")
r_stack
plot(r_stack)
# Read in raster files
spam_H_MAIZ_A_mn <- rast("./data/MN/spam/spam_H_MAIZ_A_mn.tif")
spam_P_MAIZ_A_mn <- rast("./data/MN/spam/spam_P_MAIZ_A_mn.tif")
# row 3, column 3
ras_a[3, 3]
# cell ID 15
ras_a[15]
# all values
values(r_stack, mat=TRUE, dataframe=TRUE)
# row 3-4
values(ras_a, mat=FALSE, dataframe=FALSE, row = 3, nrows = 2, col=1, ncols=2)
?CV
?cv
area <- ras_a
areaX2 <- area*2
areaSq <- area^2
# Plot
par(mfrow=c(1,2))
plot(areaX2, main="Area Doubled")
plot(areaSq, main="Area Squared")
mean(areaX2, areaSq)
area_cap <- area
area_cap[area_cap >= 25 ] <- 25
# Plot
plot(area_cap, main="Capped Area at 25")
yield <- ras_b/ras_a
plot(yield)
area_focal_1 = focal(area, w = matrix(1, nrow = 3, ncol = 3), fun = min)
area_focal_2 = focal(area, w = matrix(1, nrow = 3, ncol = 3), fun = min, na.rm=TRUE, pad=T, fillvalue=NA)
# Plot
par(mfrow=c(1,3))
plot(area, main="Area")
plot(area_focal_1, main="Area Focal Operation, w/o Padding")
plot(area_focal_2, main="Area Focal Operation, w Padding")
plot(soil)
z <- zonal(area, soil, fun = "mean")
z
global(area, fun="max")
global(area, fun='sd')
area_1 <- area
ext(area_1)
area_2 <- extend(area, c(1, 2))
ext(area_2)
area_3 <- trim(area_2)
ext(area_3)
par(mfrow=c(1,3))
plot(area_1)
plot(area_2)
plot(area_3)
area_c1 = crop(area, ext(-1.5, 0.5, -0.5, 1.5))
area_c2 = crop(area, ext(-0.5, 1.5, -1.5, 0.5))
area_c1c2 = merge(area_c1, area_c2)
# Plots
par(mfrow=c(1,3))
plot(area_c1)
plot(area_c2)
plot(area_c1c2)
area_agg = aggregate(area, fact=2, fun=sum)
# quick plot
par(mfrow=c(1,2))
plot(area)
plot(area_agg)
area_nb = disagg(area_agg, fact=2)
area_bi = disagg(area_agg, fact=2, method = "bilinear")
# plot
par(mfrow=c(1,2))
plot(area_nb)
plot(area_bi)
# classify with a 3-column classifying matrix specifying "from-to-becomes" , or a two-column matrix "is-becomes".
rcl = matrix(c(0, 12, 1, 12, 24, 2, 24, 36, 3), ncol = 3, byrow = TRUE)
rcl
area_rcl = classify(area, rcl = rcl)
plot(area_rcl)
# classify with a vector with "cuts"
breaks <- c(0, 12, 24, 36)
area_cut <- classify(area, breaks)
plot(area_cut)
# SpatialPolygons for cropping/masking
px <- c(0, 0, 1, 1, -1, -1)
py <- c(1.5, 0, 0, -1, -1, 1.5)
area_pol <- vect(cbind(px, py), "polygons")  # Convert to SpatVector
crs(area_pol) <- crs(area)
# plot
plot(area_pol)
area_cropped <- crop(area, area_pol)
area_masked <- mask(area, area_pol)
par(mfrow=c(1,3))
plot(area, main="Area")
plot(area_cropped, main="Area cropped")
plot(area_masked, main="Area masked")
# total area within selected shape
extract(area, area_pol, fun=sum, na.rm=T)
# total area within selected shape
extract(area, area_pol, fun=sum, na.rm=T)
area_pol_ras <- rasterize(area_pol, area)
area_pol_ras
plot(area_pol_ras)
